{"ast":null,"code":"var _jsxFileName = \"/Users/derek/Desktop/project/JoinMe-fe-DerekLarm/my-app/src/components/Map.js\";\nimport React, { useState, useCallback } from \"react\";\nimport { GoogleMap, useLoadScript, Marker, InfoWindow } from \"@react-google-maps/api\";\nimport { formatRelative } from \"date-fns\";\nimport mapStyles from \"../mapStyles\";\nimport { Button } from \"react-bootstrap\";\nconst libraries = [\"places\"];\nconst mapContainerStyle = {\n  width: \"100%\",\n  height: \"100vh\"\n};\nconst center = {\n  lat: 10.785478,\n  lng: 106.696847\n};\nconst options = {\n  styles: mapStyles,\n  disableDefaultUI: true,\n  zoomControl: true,\n  disableDoubleClickZoom: true\n};\nexport default function Map(props) {\n  const {\n    isLoaded,\n    loadError\n  } = useLoadScript({\n    googleMapsApiKey: process.env.REACT_APP_API_KEY,\n    libraries\n  });\n  const [coordinates, setCoordinates] = useState([]);\n  const [selected, setSelected] = useState(null);\n  const [submitted, setSubmitted] = useState(null); // DOUBLE CLICk MAP\n\n  const onMapClick = useCallback(event => {\n    props.handleShow(event);\n    console.log(\"Event Info:\", event);\n    setCoordinates(current => [...current, {\n      lat: event.latLng.lat(),\n      lng: event.latLng.lng(),\n      time: new Date()\n    }]);\n  }, [props]);\n  const mapRef = React.useRef();\n  const onMapLoad = React.useCallback(map => {\n    mapRef.current = map;\n  });\n  if (loadError) return \"Error loading maps\";\n  if (!isLoaded) return \"Loading Maps\";\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(GoogleMap, {\n    mapContainerStyle: mapContainerStyle,\n    zoom: 14,\n    center: center,\n    options: options,\n    onDblClick: onMapClick,\n    onLoad: onMapLoad,\n    className: \"map\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  }, coordinates.map(coordinate => /*#__PURE__*/React.createElement(Marker, {\n    key: coordinate.time.toISOString(),\n    position: {\n      lat: coordinate.lat,\n      lng: coordinate.lng\n    },\n    icon: {\n      url: \"/profilePic.jpeg\",\n      scaledSize: new window.google.maps.Size(50, 50),\n      origin: new window.google.maps.Point(0, 0),\n      anchor: new window.google.maps.Point(30, 30)\n    } // POP UP EVENT DETAILS\n    ,\n    onClick: () => {\n      setSelected(coordinate);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 11\n    }\n  })), selected ? /*#__PURE__*/React.createElement(InfoWindow, {\n    position: {\n      lat: selected.lat,\n      lng: selected.lng\n    },\n    onCloseClick: () => setSelected(null),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 15\n    }\n  }, \"Event Title\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 15\n    }\n  }, \"Created: \", formatRelative(selected.time, new Date())))) : null), /*#__PURE__*/React.createElement(Button, {\n    onClick: () => props.handleShow(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }\n  }, \"Click Me\"));\n}","map":{"version":3,"sources":["/Users/derek/Desktop/project/JoinMe-fe-DerekLarm/my-app/src/components/Map.js"],"names":["React","useState","useCallback","GoogleMap","useLoadScript","Marker","InfoWindow","formatRelative","mapStyles","Button","libraries","mapContainerStyle","width","height","center","lat","lng","options","styles","disableDefaultUI","zoomControl","disableDoubleClickZoom","Map","props","isLoaded","loadError","googleMapsApiKey","process","env","REACT_APP_API_KEY","coordinates","setCoordinates","selected","setSelected","submitted","setSubmitted","onMapClick","event","handleShow","console","log","current","latLng","time","Date","mapRef","useRef","onMapLoad","map","coordinate","toISOString","url","scaledSize","window","google","maps","Size","origin","Point","anchor"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,WAA1B,QAA6C,OAA7C;AACA,SACEC,SADF,EAEEC,aAFF,EAGEC,MAHF,EAIEC,UAJF,QAKO,wBALP;AAMA,SAASC,cAAT,QAA+B,UAA/B;AACA,OAAOC,SAAP,MAAsB,cAAtB;AACA,SAASC,MAAT,QAAuB,iBAAvB;AAEA,MAAMC,SAAS,GAAG,CAAC,QAAD,CAAlB;AACA,MAAMC,iBAAiB,GAAG;AACxBC,EAAAA,KAAK,EAAE,MADiB;AAExBC,EAAAA,MAAM,EAAE;AAFgB,CAA1B;AAIA,MAAMC,MAAM,GAAG;AACbC,EAAAA,GAAG,EAAE,SADQ;AAEbC,EAAAA,GAAG,EAAE;AAFQ,CAAf;AAIA,MAAMC,OAAO,GAAG;AACdC,EAAAA,MAAM,EAAEV,SADM;AAEdW,EAAAA,gBAAgB,EAAE,IAFJ;AAGdC,EAAAA,WAAW,EAAE,IAHC;AAIdC,EAAAA,sBAAsB,EAAE;AAJV,CAAhB;AAOA,eAAe,SAASC,GAAT,CAAaC,KAAb,EAAoB;AACjC,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAA0BrB,aAAa,CAAC;AAC5CsB,IAAAA,gBAAgB,EAAEC,OAAO,CAACC,GAAR,CAAYC,iBADc;AAE5CnB,IAAAA;AAF4C,GAAD,CAA7C;AAKA,QAAM,CAACoB,WAAD,EAAcC,cAAd,IAAgC9B,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAAC+B,QAAD,EAAWC,WAAX,IAA0BhC,QAAQ,CAAC,IAAD,CAAxC;AACA,QAAM,CAACiC,SAAD,EAAYC,YAAZ,IAA4BlC,QAAQ,CAAC,IAAD,CAA1C,CARiC,CAUjC;;AACA,QAAMmC,UAAU,GAAGlC,WAAW,CAC3BmC,KAAD,IAAW;AACTd,IAAAA,KAAK,CAACe,UAAN,CAAiBD,KAAjB;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BH,KAA3B;AACAN,IAAAA,cAAc,CAAEU,OAAD,IAAa,CAC1B,GAAGA,OADuB,EAE1B;AACE1B,MAAAA,GAAG,EAAEsB,KAAK,CAACK,MAAN,CAAa3B,GAAb,EADP;AAEEC,MAAAA,GAAG,EAAEqB,KAAK,CAACK,MAAN,CAAa1B,GAAb,EAFP;AAGE2B,MAAAA,IAAI,EAAE,IAAIC,IAAJ;AAHR,KAF0B,CAAd,CAAd;AAQD,GAZ2B,EAa5B,CAACrB,KAAD,CAb4B,CAA9B;AAkBA,QAAMsB,MAAM,GAAG7C,KAAK,CAAC8C,MAAN,EAAf;AACA,QAAMC,SAAS,GAAG/C,KAAK,CAACE,WAAN,CAAmB8C,GAAD,IAAS;AAC3CH,IAAAA,MAAM,CAACJ,OAAP,GAAiBO,GAAjB;AACD,GAFiB,CAAlB;AAIA,MAAIvB,SAAJ,EAAe,OAAO,oBAAP;AACf,MAAI,CAACD,QAAL,EAAe,OAAO,cAAP;AACf,sBACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,SAAD;AACE,IAAA,iBAAiB,EAAEb,iBADrB;AAEE,IAAA,IAAI,EAAE,EAFR;AAGE,IAAA,MAAM,EAAEG,MAHV;AAIE,IAAA,OAAO,EAAEG,OAJX;AAKE,IAAA,UAAU,EAAEmB,UALd;AAME,IAAA,MAAM,EAAEW,SANV;AAOE,IAAA,SAAS,EAAC,KAPZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KASDjB,WAAW,CAACkB,GAAZ,CAAiBC,UAAD,iBACX,oBAAC,MAAD;AACE,IAAA,GAAG,EAAEA,UAAU,CAACN,IAAX,CAAgBO,WAAhB,EADP;AAEE,IAAA,QAAQ,EAAE;AAAEnC,MAAAA,GAAG,EAAEkC,UAAU,CAAClC,GAAlB;AAAuBC,MAAAA,GAAG,EAAEiC,UAAU,CAACjC;AAAvC,KAFZ;AAGE,IAAA,IAAI,EAAE;AACJmC,MAAAA,GAAG,EAAE,kBADD;AAEJC,MAAAA,UAAU,EAAE,IAAIC,MAAM,CAACC,MAAP,CAAcC,IAAd,CAAmBC,IAAvB,CAA4B,EAA5B,EAAgC,EAAhC,CAFR;AAGJC,MAAAA,MAAM,EAAE,IAAIJ,MAAM,CAACC,MAAP,CAAcC,IAAd,CAAmBG,KAAvB,CAA6B,CAA7B,EAAgC,CAAhC,CAHJ;AAIJC,MAAAA,MAAM,EAAE,IAAIN,MAAM,CAACC,MAAP,CAAcC,IAAd,CAAmBG,KAAvB,CAA6B,EAA7B,EAAiC,EAAjC;AAJJ,KAHR,CASE;AATF;AAUE,IAAA,OAAO,EAAE,MAAM;AACbzB,MAAAA,WAAW,CAACgB,UAAD,CAAX;AACD,KAZH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADL,CATC,EAyBGjB,QAAQ,gBACP,oBAAC,UAAD;AACE,IAAA,QAAQ,EAAE;AAAEjB,MAAAA,GAAG,EAAEiB,QAAQ,CAACjB,GAAhB;AAAqBC,MAAAA,GAAG,EAAEgB,QAAQ,CAAChB;AAAnC,KADZ;AAEE,IAAA,YAAY,EAAE,MAAMiB,WAAW,CAAC,IAAD,CAFjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAa1B,cAAc,CAACyB,QAAQ,CAACW,IAAV,EAAgB,IAAIC,IAAJ,EAAhB,CAA3B,CAFF,CAJF,CADO,GAUL,IAnCN,CADF,eAsCE,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAE,MAAMrB,KAAK,CAACe,UAAN,EAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAtCF,CADF;AA0CD","sourcesContent":["import React, { useState, useCallback } from \"react\";\nimport {\n  GoogleMap,\n  useLoadScript,\n  Marker,\n  InfoWindow,\n} from \"@react-google-maps/api\";\nimport { formatRelative } from \"date-fns\";\nimport mapStyles from \"../mapStyles\";\nimport { Button } from \"react-bootstrap\";\n\nconst libraries = [\"places\"];\nconst mapContainerStyle = {\n  width: \"100%\",\n  height: \"100vh\",\n};\nconst center = {\n  lat: 10.785478,\n  lng: 106.696847,\n};\nconst options = {\n  styles: mapStyles,\n  disableDefaultUI: true,\n  zoomControl: true,\n  disableDoubleClickZoom: true,\n};\n\nexport default function Map(props) {\n  const { isLoaded, loadError } = useLoadScript({\n    googleMapsApiKey: process.env.REACT_APP_API_KEY,\n    libraries,\n  });\n\n  const [coordinates, setCoordinates] = useState([]);\n  const [selected, setSelected] = useState(null);\n  const [submitted, setSubmitted] = useState(null)\n\n  // DOUBLE CLICk MAP\n  const onMapClick = useCallback(\n    (event) => {\n      props.handleShow(event);\n      console.log(\"Event Info:\", event)\n      setCoordinates((current) => [\n        ...current,\n        {\n          lat: event.latLng.lat(),\n          lng: event.latLng.lng(),\n          time: new Date(),\n        },\n      ]);\n    },\n    [props]\n  );\n\n\n\n  const mapRef = React.useRef();\n  const onMapLoad = React.useCallback((map) => {\n    mapRef.current = map;\n  });\n\n  if (loadError) return \"Error loading maps\";\n  if (!isLoaded) return \"Loading Maps\";\n  return (\n    <div className=\"container\">\n      <GoogleMap\n        mapContainerStyle={mapContainerStyle}\n        zoom={14}\n        center={center}\n        options={options}\n        onDblClick={onMapClick}\n        onLoad={onMapLoad}\n        className=\"map\"\n      >\n    {coordinates.map((coordinate) => (\n          <Marker\n            key={coordinate.time.toISOString()}\n            position={{ lat: coordinate.lat, lng: coordinate.lng }}\n            icon={{\n              url: \"/profilePic.jpeg\",\n              scaledSize: new window.google.maps.Size(50, 50),\n              origin: new window.google.maps.Point(0, 0),\n              anchor: new window.google.maps.Point(30, 30),\n            }}\n            // POP UP EVENT DETAILS\n            onClick={() => {\n              setSelected(coordinate);\n            }}\n          />\n        ))} \n        {selected ? (\n          <InfoWindow\n            position={{ lat: selected.lat, lng: selected.lng }}\n            onCloseClick={() => setSelected(null)}\n          >\n            <div>\n              <h2>Event Title</h2>\n              <p>Created: {formatRelative(selected.time, new Date())}</p>\n            </div>\n          </InfoWindow>\n        ) : null}\n      </GoogleMap>\n      <Button onClick={() => props.handleShow()}>Click Me</Button>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}