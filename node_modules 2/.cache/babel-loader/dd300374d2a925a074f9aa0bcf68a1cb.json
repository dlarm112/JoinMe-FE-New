{"ast":null,"code":"var _jsxFileName = \"/Users/derek/Desktop/project/JoinMe-fe-DerekLarm/my-app/src/components/Map.js\";\nimport React, { useState, useCallback } from \"react\";\nimport { GoogleMap, useLoadScript, Marker, InfoWindow } from \"@react-google-maps/api\";\nimport { formatRelative } from \"date-fns\";\nimport mapStyles from \"../mapStyles\";\nimport { Button } from \"react-bootstrap\";\nconst libraries = [\"places\"];\nconst mapContainerStyle = {\n  width: \"100%\",\n  height: \"100vh\"\n};\nconst center = {\n  lat: 10.785478,\n  lng: 106.696847\n};\nconst options = {\n  styles: mapStyles,\n  disableDefaultUI: true,\n  zoomControl: true\n};\nexport default function Map(props) {\n  const {\n    isLoaded,\n    loadError\n  } = useLoadScript({\n    googleMapsApiKey: process.env.REACT_APP_API_KEY,\n    libraries\n  });\n  const [coordinates, setCoordinates] = useState([]);\n  const [selected, setSelected] = useState(null);\n  const onMapClick = useCallback(event => {\n    console.log(event);\n    setCoordinates(current => [...current, {\n      lat: event.latLng.lat(),\n      lng: event.latLng.lng(),\n      time: new Date()\n    }]);\n    props.handleShow(coordinates);\n  }, [coordinates, props]);\n  const mapRef = React.useRef();\n  const onMapLoad = React.useCallback(map => {\n    mapRef.current = map;\n  });\n  if (loadError) return \"Error loading maps\";\n  if (!isLoaded) return \"Loading Maps\";\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  }, \"JoinMe\"), /*#__PURE__*/React.createElement(GoogleMap, {\n    mapContainerStyle: mapContainerStyle,\n    zoom: 14,\n    center: center,\n    options: options,\n    onClick: onMapClick,\n    onLoad: onMapLoad,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }, coordinates.map(coordinate => /*#__PURE__*/React.createElement(Marker, {\n    key: coordinate.time.toISOString(),\n    position: {\n      lat: coordinate.lat,\n      lng: coordinate.lng\n    },\n    icon: {\n      url: \"/profilePic.jpeg\",\n      scaledSize: new window.google.maps.Size(50, 50),\n      origin: new window.google.maps.Point(0, 0),\n      anchor: new window.google.maps.Point(30, 30)\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 11\n    }\n  })), selected ? /*#__PURE__*/React.createElement(InfoWindow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }\n  }, \"Event Title\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }\n  }, \"Created: \", formatRelative(selected.time, new Date())))) : null), /*#__PURE__*/React.createElement(Button, {\n    onClick: () => props.handleShow(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }\n  }, \"Click Me\"));\n}","map":{"version":3,"sources":["/Users/derek/Desktop/project/JoinMe-fe-DerekLarm/my-app/src/components/Map.js"],"names":["React","useState","useCallback","GoogleMap","useLoadScript","Marker","InfoWindow","formatRelative","mapStyles","Button","libraries","mapContainerStyle","width","height","center","lat","lng","options","styles","disableDefaultUI","zoomControl","Map","props","isLoaded","loadError","googleMapsApiKey","process","env","REACT_APP_API_KEY","coordinates","setCoordinates","selected","setSelected","onMapClick","event","console","log","current","latLng","time","Date","handleShow","mapRef","useRef","onMapLoad","map","coordinate","toISOString","url","scaledSize","window","google","maps","Size","origin","Point","anchor"],"mappings":"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","sourcesContent":["import React, { useState, useCallback } from \"react\";\nimport {\n  GoogleMap,\n  useLoadScript,\n  Marker,\n  InfoWindow,\n} from \"@react-google-maps/api\";\nimport { formatRelative } from \"date-fns\";\nimport mapStyles from \"../mapStyles\";\nimport { Button } from \"react-bootstrap\";\n\nconst libraries = [\"places\"];\nconst mapContainerStyle = {\n  width: \"100%\",\n  height: \"100vh\",\n};\nconst center = {\n  lat: 10.785478,\n  lng: 106.696847,\n};\nconst options = {\n  styles: mapStyles,\n  disableDefaultUI: true,\n  zoomControl: true,\n};\n\nexport default function Map(props) {\n  const { isLoaded, loadError } = useLoadScript({\n    googleMapsApiKey: process.env.REACT_APP_API_KEY,\n    libraries,\n  });\n\n  const [coordinates, setCoordinates] = useState([]);\n  const [selected, setSelected] = useState(null);\n\n  const onMapClick = useCallback(\n    (event) => {\n      console.log(event);\n      setCoordinates((current) => [\n        ...current,\n        {\n          lat: event.latLng.lat(),\n          lng: event.latLng.lng(),\n          time: new Date(),\n        },\n      ]);\n      props.handleShow(coordinates);\n    },\n    [coordinates, props]\n  );\n\n  const mapRef = React.useRef();\n  const onMapLoad = React.useCallback((map) => {\n    mapRef.current = map;\n  });\n\n  if (loadError) return \"Error loading maps\";\n  if (!isLoaded) return \"Loading Maps\";\n  return (\n    <div>\n      <h1>JoinMe</h1>\n      <GoogleMap\n        mapContainerStyle={mapContainerStyle}\n        zoom={14}\n        center={center}\n        options={options}\n        onClick={onMapClick}\n        onLoad={onMapLoad}\n      >\n        {coordinates.map((coordinate) => (\n          <Marker\n            key={coordinate.time.toISOString()}\n            position={{ lat: coordinate.lat, lng: coordinate.lng }}\n            icon={{\n              url: \"/profilePic.jpeg\",\n              scaledSize: new window.google.maps.Size(50, 50),\n              origin: new window.google.maps.Point(0, 0),\n              anchor: new window.google.maps.Point(30, 30),\n            }}\n          />\n        ))}\n        {selected? (<InfoWindow>\n          <div>\n            <h2>\n              Event Title\n            </h2>\n            <p>\n              Created: {formatRelative(selected.time, new Date())}\n            </p>\n          </div>\n        </InfoWindow>) : null}\n      </GoogleMap>\n      <Button onClick={() => props.handleShow()}>Click Me</Button>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}